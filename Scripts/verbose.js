/**
 * A verbose logging utility class that provides various console logging methods with verbosity control.
 * 100% generated by AI because i'm lazy for this one... hehe.
 */
class Verbose {
  constructor(logName = null, colour = null) {
    this.__currentLogName = logName;
    this.__currentColour = colour;
  }

  /**
   * Internal function to get settings from localStorage
 * @private
 * @param {string} logName - Optional log name for specific verbose settings
 * @return {boolean} The setting value
 */
  __getSetting(logName = null) {
    if (logName) {
      return localStorage.getItem(`setting-Debug-verbose_${logName}`) === 'true';
    }
    return localStorage.getItem('setting-Debug-verbose') === 'true';
  }

  /**
   * Gets the current verbosity state
   * @return {boolean} The current verbosity state
   */
  get verbose() {
    if (this.__currentLogName) {
      return this.__getSetting(this.__currentLogName);
    }
    return this.__getSetting();
  }

  /**
   * Adds a new named log instance
   * @param {string} log_name - Name of the log to add
   * @param {string} [colour] - Optional colour for the log prefix
   * @return {Verbose} Returns a new Verbose instance
     */
  add_log(log_name, colour) {
    const newLog = new Verbose(log_name, colour);
    this[log_name] = newLog;
    return newLog;
  }

  /**
   * Logs a message to the console if verbose mode is enabled
   * @param {...*} params - Parameters to log
   */
  log(...params) {
    if (!this.verbose) return;
    const prefix = this.__currentLogName ? [`%cVERBOSE_${this.__currentLogName}:%c`, `color: ${this.__currentColour || 'black'}`, ''] : [];
    console.log(...prefix, ...params);
  }

  /**
   * Logs a warning message to the console if verbose mode is enabled
   * @param {...*} params - Parameters to log
   */
  warn(...params) {
    if (!this.verbose) return;
    const prefix = this.__currentLogName ? [`%cVERBOSE_${this.__currentLogName}:%c`, `color: ${this.__currentColour || 'black'}`, ''] : [];
    console.warn(...prefix, ...params);
  }

  /**
   * Logs an error message to the console if verbose mode is enabled
   * @param {...*} params - Parameters to log
   */
  error(...params) {
    if (!this.verbose) return;
    const prefix = this.__currentLogName ? [`%cVERBOSE_${this.__currentLogName}:%c`, `color: ${this.__currentColour || 'black'}`, ''] : [];
    console.error(...prefix, ...params);
  }

  /**
   * Logs an info message to the console if verbose mode is enabled
   * @param {...*} params - Parameters to log
   */
  info(...params) {
    if (!this.verbose) return;
    const prefix = this.__currentLogName ? [`%cVERBOSE_${this.__currentLogName}:%c`, `color: ${this.__currentColour || 'black'}`, ''] : [];
    console.info(...prefix, ...params);
  }

  /**
   * Logs a debug message to the console if verbose mode is enabled
   * @param {...*} params - Parameters to log
   */
  debug(...params) {
    if (!this.verbose) return;
    const prefix = this.__currentLogName ? [`%cVERBOSE_${this.__currentLogName}:%c`, `color: ${this.__currentColour || 'black'}`, ''] : [];
    console.debug(...prefix, ...params);
  }

  /**
   * Logs a stack trace to the console if verbose mode is enabled
   * @param {...*} params - Parameters to log
   */
  trace(...params) {
    if (!this.verbose) return;
    const prefix = this.__currentLogName ? [`%cVERBOSE_${this.__currentLogName}:%c`, `color: ${this.__currentColour || 'black'}`, ''] : [];
    console.trace(...prefix, ...params);
  }

  /**
   * Logs an object to the console if verbose mode is enabled
   * @param {...*} params - Parameters to log
   */
  dir(...params) {
    if (!this.verbose) return;
    console.dir(...params);
  }

  /**
   * Logs tabular data to the console if verbose mode is enabled
   * @param {...*} params - Parameters to log
   */
  table(...params) {
    if (!this.verbose) return;
    console.table(...params);
  }
}

const verbose = new Verbose();
